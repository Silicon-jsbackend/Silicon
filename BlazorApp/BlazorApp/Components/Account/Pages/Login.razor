@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<section id="signin">
    <div class="container">

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <h1> Welcome Back</h1>
            <p>Don't have an account? <a href="/Account/Register">Sign up here</a>. </p>
        
            <div class="content">

                    
                    
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                         <div id="form-email" class="input-group">
                            <label for="email">Email</label>
                            <InputText @bind-Value="Input.Email" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div id="form-password" class="input-group">
                            <label for="password">Password</label>
                            <InputText type="password" @bind-Value="Input.Password" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div id="form-terms" class="checkbox">
                            <label>
                                Remember me
                                <InputCheckbox @bind-Value="Input.RememberMe" />
                               
                            </label>
                        </div>
                        <div>
                    <button type="submit" class="btn-theme">Log in</button>
                        </div>
@*                         <div>
                            <p>
                                <a href="Account/ForgotPassword">Forgot your password?</a>
                            </p>
                            <p>
                                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                            </p>
                            <p>
                                <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                            </p>
                        </div> *@
                    
           
            @* <div class="col-md-6 col-md-offset-2">
                <section>
                    <h3>Use another service to log in.</h3>
                    <hr />
                    <ExternalLoginPicker />
                </section>
            </div> *@
        </div>
        </EditForm>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
