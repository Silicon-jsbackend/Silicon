@page "/Account/Register"
@using BlazorApp.Filters
@rendermode InteractiveServer

<PageTitle>Sign up</PageTitle>

<section id="signup">
    <div class="container">

        <EditForm FormName="signupform" Model="SignUpForm" OnValidSubmit="OnValidSubmit" method="post" novalidate>
            <DataAnnotationsValidator />
            <h1>Create Account</h1>
            <p>Already have an account? <a href="/account/login">Sign in here</a>. </p>

            @if (!string.IsNullOrEmpty(@StatusMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @StatusMessage
                </div>
            }

            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>FirstName</label>
                    <InputText @bind-Value="SignUpForm.FirstName" />
                    <ValidationMessage For="() => SignUpForm.FirstName" />
                </div>

                <div id="form-lastname" class="input-group">
                    <label>LastName</label>
                    <InputText @bind-Value="SignUpForm.LastName" />
                    <ValidationMessage For="() => SignUpForm.LastName" />
                </div>

                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText @bind-Value="SignUpForm.Email" type="email" />
                    <ValidationMessage For="() => SignUpForm.Email" />
                </div>

                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText @bind-Value="SignUpForm.Password" type="password" />
                    <ValidationMessage For="() => SignUpForm.Password" />
                </div>

                <div id="form-confirm" class="input-group">
                    <label>ConfirmPassword</label>
                    <InputText @bind-Value="SignUpForm.ConfirmPassword" type="password" />
                    <ValidationMessage For="() => SignUpForm.ConfirmPassword" />
                </div>

                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="SignUpForm.TermsAndConditions" />
                        <label>I agree to the <a href="/">Terms</a> & <a href="/">Conditions</a>.</label>
                    </div>

                    <ValidationMessage For="() => SignUpForm.TermsAndConditions" />
                </div>

            </div>

            <button id="form-submit" type="submit" class="btn-theme-s">Sign Up</button>
        </EditForm>

    </div>

</section>


@code
{
    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public SignUpFormModel SignUpForm { get; set; } = new();

    public async Task OnValidSubmit(EditContext editContext)
    {
        var user = new ApplicationUser
            {
                UserProfile = new UserProfile
                {
                    FirstName = SignUpForm.FirstName,
                    LastName = SignUpForm.LastName
                },
                UserName = SignUpForm.Email,
                Email = SignUpForm.Email,
                EmailConfirmed = true // Mark the email address as confirmed, can be removed in the program instead
            };

        try
        {
            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                StatusMessage = "Email already exists";
                return;
            }

            var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            if (!result.Succeeded)
            {
                StatusMessage = "Error creating account";
                return;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = "Error creating account";
            return;
        }

        try
        {
          
            var userEmail = new { Email = SignUpForm.Email };
            var response = await Http.PostAsJsonAsync("https://verificationprovider-silicone-et-new.azurewebsites.net/api/GenerateVerificationCodeHttp?code=6dyFOwLft929CUMVEgoAyXpgQttqIFyO78cNzK9Wql0bAzFu-8qjHQ==", userEmail);

            
            if (response.IsSuccessStatusCode)
            {
               
                var responseBody = await response.Content.ReadAsStringAsync();
               
                Console.WriteLine("Server response: " + responseBody);
            }
            else
            {
                
                Console.WriteLine("Error: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            
            Console.WriteLine("Error sending email to service bus: " + ex.Message);
        }

        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = user.Email, ["returnUrl"] = ReturnUrl });
        // }

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("account/login", new() { ["email"] = user.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }





    // public async Task OnValidSubmit(EditContext editContext)
    // {
    //     var user = new ApplicationUser
    //     {
    //         UserProfile = new UserProfile
    //         {
    //             FirstName = SignUpForm.FirstName,
    //             LastName = SignUpForm.LastName
    //         },
    //         UserName = SignUpForm.Email,
    //         Email = SignUpForm.Email
    //     };

    //     try
    //     {
    //         var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
    //         if (alreadyExists != null)
    //         {
    //             StatusMessage = "Email already exists";
    //             return;
    //         }

    //         var result = await UserManager.CreateAsync(user, SignUpForm.Password);
    //         if (!result.Succeeded)
    //         {
    //             StatusMessage = "Error to creating account";
    //             return;
    //         };
    //     }
    //     catch (Exception ex)
    //     {
    //         StatusMessage = "Error to creating account";
    //         return;
    //     }
      

    //     try
    //     {
    //         // Skicka e-postadressen som JSON till servicebus
    //         var userEmail = new { Email = SignUpForm.Email };
    //         var response = await Http.PostAsJsonAsync("https://verificationprovider-silicone-et-new.azurewebsites.net/api/GenerateVerificationCodeHttp?code=6dyFOwLft929CUMVEgoAyXpgQttqIFyO78cNzK9Wql0bAzFu-8qjHQ==", userEmail);

    //         // Kontrollera om förfrågan var framgångsrik (statuskod 2xx)
    //         if (response.IsSuccessStatusCode)
    //         {
    //             // Läs svaret från servern
    //             var responseBody = await response.Content.ReadAsStringAsync();
    //             // Gör något med svaret, till exempel logga det
    //             Console.WriteLine("Server response: " + responseBody);
    //         }
    //         else
    //         {
    //             // Servern returnerade en felaktig statuskod, hantera detta här
    //             Console.WriteLine("Error: " + response.StatusCode);
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         // Ett undantag inträffade vid förfrågan, hantera detta här
    //         Console.WriteLine("Error sending email to service bus: " + ex.Message);
    //     }


    //     if (UserManager.Options.SignIn.RequireConfirmedAccount)
    //     {
    //         RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = user.Email, ["returnUrl"] = ReturnUrl });
    //     }

    //     await SignInManager.SignInAsync(user, isPersistent: false);
    //     RedirectManager.RedirectTo(ReturnUrl); 
    // 
    // }

    




    public class SignUpFormModel
    {
        [DataType(DataType.Text)]
        [Display(Name = "First Name", Prompt = "Enter your frist name", Order = 0)]
        [Required(ErrorMessage = "First name is required")]
        [MinLength(2, ErrorMessage = "First name must be at least 2 characters long")]
        public string FirstName { get; set; } = null!;

        [DataType(DataType.Text)]
        [Display(Name = "Last Name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Last name is required")]
        [MinLength(2, ErrorMessage = "Last name must be at least 2 characters long")]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email", Prompt = "Enter your email", Order = 2)]
        [Required(ErrorMessage = "Email is required")]
        [RegularExpression(@"^(?=.*[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,})[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$",
                              ErrorMessage = "The email format is not valid.")]
        public string Email { get; set; } = null!;

        [Display(Name = "Password", Prompt = "Enter your password", Order = 3)]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password is required")]
        [RegularExpression(@"^(?=.*[A-Z])(?=.*\d)(?=.*[^a-zA-Z\d\s])(?=.*[a-zA-Z\d]).{8,}$",
                          ErrorMessage = "The password format is not valid. It must be a strong password")]
        public string Password { get; set; } = null!;

        [Display(Name = "Confirm Password", Prompt = "Confirm your password", Order = 4)]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password must be comfirmd")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = null!;

        [CheckBoxRequired]
        [Display(Name = "I agree to the Terms and Conditions", Order = 5)]
        public bool TermsAndConditions { get; set; } = false;
    }
}